{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "yixinlyudf1"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"GitHubforScottLyu_credential": {
			"type": "secureString",
			"metadata": "Secure string for 'credential' of 'GitHubforScottLyu'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://yixinlyuds598.dfs.core.windows.net/"
		},
		"AzureKeyVault1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://OpenwheatherAPI.vault.azure.net/"
		},
		"GitHubforScottLyu_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "Scottlyu134"
		},
		"pollution_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "http://api.openweathermap.org/"
		},
		"weatherboston1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://history.openweathermap.org/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GitHubforScottLyu')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is the GitHub repository for Scott Lyu",
				"annotations": [],
				"type": "GitHub",
				"typeProperties": {
					"username": "[parameters('GitHubforScottLyu_properties_typeProperties_username')]",
					"credential": {
						"type": "SecureString",
						"value": "[parameters('GitHubforScottLyu_credential')]"
					},
					"encryptedCredential": "ew0KICAiVmVyc2lvbiI6ICIyMDE3LTExLTMwIiwNCiAgIlByb3RlY3Rpb25Nb2RlIjogIktleSIsDQogICJTZWNyZXRDb250ZW50VHlwZSI6ICJQbGFpbnRleHQiLA0KICAiQ3JlZGVudGlhbElkIjogIkRBVEFGQUNUT1JZQDFDNzI3NzI2LTEyODktNDQ3My05MUU4LTk2MEFCOTMyNjBCQ19kMDE2Yzk0NS02YWI4LTQ1ZDAtYmFlOC05ODhiY2VjOGVjNTgiDQp9"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pollution')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('pollution_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/weatherboston1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('weatherboston1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Bronze/historicalweather",
						"fileSystem": "container1"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"message": {
							"type": "string"
						},
						"cod": {
							"type": "string"
						},
						"city_id": {
							"type": "integer"
						},
						"calctime": {
							"type": "number"
						},
						"cnt": {
							"type": "integer"
						},
						"list": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"dt": {
										"type": "integer"
									},
									"main": {
										"type": "object",
										"properties": {
											"temp": {
												"type": "number"
											},
											"feels_like": {
												"type": "number"
											},
											"pressure": {
												"type": "integer"
											},
											"humidity": {
												"type": "integer"
											},
											"temp_min": {
												"type": "number"
											},
											"temp_max": {
												"type": "number"
											}
										}
									},
									"wind": {
										"type": "object",
										"properties": {
											"speed": {
												"type": "number"
											},
											"deg": {
												"type": "integer"
											},
											"gust": {
												"type": "number"
											}
										}
									},
									"clouds": {
										"type": "object",
										"properties": {
											"all": {
												"type": "integer"
											}
										}
									},
									"weather": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"main": {
													"type": "string"
												},
												"description": {
													"type": "string"
												},
												"icon": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Bronze/historicalpollution",
						"fileSystem": "container1"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResource1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "weatherboston1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"startDate": {
						"type": "string"
					},
					"endDate": {
						"type": "string"
					},
					"apiKey": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "data/2.5/history/city?lat=42.3601&lon=-71.0589&type=hour&start=@{dataset().startDate}&end=@{dataset().endDate}&appid=@{dataset().apiKey}\n",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/weatherboston1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResource2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pollution",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"startDate": {
						"type": "string"
					},
					"endDate": {
						"type": "string"
					},
					"apiKey": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "data/2.5/air_pollution/history?lat=42.3601&lon=-71.0589&start=@{dataset().startDate}&end=@{dataset().endDate}&appid=@{dataset().apiKey}",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pollution')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Silver",
						"fileSystem": "container1"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pollution')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Pollution",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://OpenwheatherAPI.vault.azure.net/secrets/openweather?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Pollution",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0, 1)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "RestResource2",
											"type": "DatasetReference",
											"parameters": {
												"startDate": "@div(sub(ticks(addDays(utcNow(), -365)), ticks('1970-01-01T00:00:00Z')), 10000000)",
												"endDate": "@div(sub(ticks(addDays(utcNow(), -1)), ticks('1970-01-01T00:00:00Z')), 10000000)",
												"apiKey": {
													"value": "@activity('Pollution').output.value",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Json2",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestResource2')]",
				"[concat(variables('factoryId'), '/datasets/Json2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/weatheractivities')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Openweather",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://OpenwheatherAPI.vault.azure.net/secrets/openweather?api-version=7.0",
							"body": {
								"name": "test",
								"file": "abfs://scripts@manhernastorage.blob.core.windows.net/p-scala-spark-1.0-SNAPSHOT.jar",
								"className": "euclidobservability.spark.ScalaSparkListenerTest",
								"args": [],
								"jars": [
									"abfs://scripts@manhernastorage.blob.core.windows.net/jars/p-TelemetrySDK-1.2.0-jar-with-dependencies.jar"
								],
								"files": [],
								"archives": [],
								"conf": null,
								"driverMemory": "4g",
								"driverCores": 4,
								"executorMemory": "2g",
								"executorCores": 1,
								"numExecutors": 1
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Openweather",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0, 52)\n",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Copy data2",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "RestResource1",
											"type": "DatasetReference",
											"parameters": {
												"startDate": {
													"value": "@div(sub(ticks(addDays(utcNow(), mul(-7, add(item(), 1)))), ticks('1970-01-01T00:00:00Z')), 10000000)\n",
													"type": "Expression"
												},
												"endDate": {
													"value": "@div(sub(ticks(addDays( addDays(utcNow(), mul(-7, add(item(), 1))),7)), ticks('1970-01-01T00:00:00Z')), 10000000)",
													"type": "Expression"
												},
												"apiKey": {
													"value": "@activity('Openweather').output.value\n",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Json1",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-20T22:02:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestResource1')]",
				"[concat(variables('factoryId'), '/datasets/Json1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/weather')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json1",
								"type": "DatasetReference"
							},
							"name": "weatherData",
							"description": "the historical data form Bronze"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Parquet1",
								"type": "DatasetReference"
							},
							"name": "weatherDataSink"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          calctime as double,",
						"          city_id as boolean,",
						"          cnt as short,",
						"          cod as short,",
						"          list as (clouds as (all as short), dt as integer, main as (feels_like as double, humidity as short, pressure as short, temp as double, temp_max as double, temp_min as double), rain as ({1h} as double), snow as ({1h} as double), weather as (description as string, icon as string, id as short, main as string)[], wind as (deg as short, gust as double, speed as double))[],",
						"          message as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     wildcardPaths:['Bronze/historicalweather/*.json']) ~> weatherData",
						"weatherData foldDown(unroll(list),",
						"     mapColumn(",
						"          calctime,",
						"          city_id,",
						"          cnt,",
						"          cod,",
						"          message,",
						"          clouds_all = list.clouds.all,",
						"          timestamp = list.dt,",
						"          feels_like = list.main.feels_like,",
						"          humidity = list.main.humidity,",
						"          pressure = list.main.pressure,",
						"          temp = list.main.temp,",
						"          temp_max = list.main.temp_max,",
						"          temp_min = list.main.temp_min,",
						"          weather_description = list.weather.description,",
						"          weather_icon = list.weather.icon,",
						"          weather_id = list.weather.id,",
						"          weather_main = list.weather.main,",
						"          wind_deg = list.wind.deg,",
						"          wind_gust = list.wind.gust,",
						"          wind_speed = list.wind.speed",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive(corrected_timestamp = iif(length(toString(timestamp)) == 10, toInteger(timestamp), toInteger(null())),",
						"          location = \"Boston\") ~> derivedColumn1",
						"derivedColumn1 filter(!isNull(temp) && !isNull(humidity) && !isNull(corrected_timestamp)",
						") ~> filter1",
						"filter1 derive(date_time = toTimestamp(toLong(corrected_timestamp) * 1000),",
						"          id = concat(location, '_', toString(corrected_timestamp)),",
						"          temp_C = round(temp - 273.15, 2),",
						"          temp_min_C = round(temp_min - 273.15, 2),",
						"          temp_max_C = round(temp_max - 273.15, 2),",
						"          feels_like_C = round((feels_like - 273.15) * 9/5 + 32, 2),",
						"          temp_min_F = round((temp_min - 273.15) * 9/5 + 32, 2),",
						"          temp_max_F = round((temp_max - 273.15) * 9/5 + 32, 2),",
						"          lon = -71.0589,",
						"          lat = 42.3601,",
						"          weather_id_value = toInteger(split(toString(weather_id[1]), ': ')[1]),",
						"          weather_main_value = split(toString(weather_main[1]), ': ')[1],",
						"          weather_description_value = split(toString(weather_description[1]), ': ')[1],",
						"          weather_icon_value = split(toString(weather_icon[1]), ': ')[1]) ~> derivedColumn2",
						"derivedColumn2 select(mapColumn(",
						"          clouds_all,",
						"          feels_like_K = feels_like,",
						"          humidity,",
						"          pressure,",
						"          temp_K = temp,",
						"          temp_max_K = temp_max,",
						"          temp_min_K = temp_min,",
						"          wind_deg,",
						"          wind_gust,",
						"          wind_speed,",
						"          corrected_timestamp,",
						"          location,",
						"          date_time,",
						"          id,",
						"          temp_C,",
						"          temp_min_C,",
						"          temp_max_C,",
						"          feels_like_C,",
						"          temp_min_F,",
						"          temp_max_F,",
						"          lon,",
						"          lat,",
						"          weather_id_value,",
						"          weather_main_value,",
						"          weather_description_value,",
						"          weather_icon_value",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['weatherDataBoston'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> weatherDataSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json1')]",
				"[concat(variables('factoryId'), '/datasets/Parquet1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/silverWeather')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "weather",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"weatherData": {},
									"weatherDataSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/weather')]"
			]
		}
	]
}